<apex:page sidebar="false" showHeader="false" controller="BMCServiceDesk.ChildTemplateHierarchyController" standardStylesheets="false">
<c:CommonIncludes />
<style>
#OrderComboId{
font-size: 12px;
}
.x-panel-body-noheader{
	*height: 0px;
}
.x-grid3-row-last .x-grid3-cell-last.x-grid3-cell-selected{
	height:21px;
}
</style>
  <script>
var DataStore ;
var grid ;
var idSetString ;
var err = 0;
var reqDefId = '{!JSENCODE(reqDefId)}';
    Ext.onReady(function(){
        
        var SamplePanel = Ext.extend(Ext.Panel, {

            renderTo: 'btnToolbar',
            defaults: {bodyStyle:'padding:0px;margin:0px;zoom:0px;'}
        });
        
        new SamplePanel({
            title: '',
             bodyStyle:'padding:0px;margin:0px;zoom:0px;',
            tbar: [{
                scale: 'medium',
                tooltipType:'title',
                tooltip: '{!JSENCODE($Label.save)}',
                iconCls: 'bmcSave', 
                listeners: {
                    mouseover: function(){
                    this.setIconClass('bmcSaveOn');    
                     },
                     mouseout: function(){
                    this.setIconClass('bmcSave');          
                     }
                },              
                handler:SaveBtnHandler
            },' ',{
               id :'idIgnoreExecutionOrder',
               xtype  : 'checkbox',
               width  : 93,
               align:'top',               
               checked: true,
               boxLabel:'{!JSENCODE($Label.IgnoreExecutionOrder)}',
               cls:'chkStyle',
               boxLabel:'<span class="checkboxLabelCls">{!JSENCODE($Label.IgnoreExecutionOrder)}</span>',
               listeners:{
                    render:function(){
                        Ext.QuickTips.register({
                            target:this,
                            dismissDelay: 20000,
                            text: '{!JSENCODE($Label.TooltipIgnoreExecutionOrder)}',
                            width: 200
                        });
                    }               
               }                                     
            }]
        });
        Ext.getCmp('idIgnoreExecutionOrder').setValue('{!chkBoxValue}');
     
        eval('{!orderNum}');
        OrderNumber = new Ext.data.ArrayStore({
                        id:'Orderid',
                        fields:[
                            {name:'DisplayOrderno'},
                            {name:'OrderNum'}
                        ]
    });
        OrderNumber.loadData(order);            
  
          DataStore = new Ext.data.ArrayStore({
                    id:'DataStore',
                    fields:[
                        {name:'Task'},
                        {name:'Taskval'},
                        {name:'OrderNumber'}
                    ]
                   });               
           eval('{!JSENCODE(gridstore)}');   
           DataStore.loadData(gridrecords);    
           var cm = new Ext.grid.ColumnModel({
                columns:
                      [{ 
                            header:'{!JSENCODE($ObjectType.Task__c.LabelPlural)}',
                            sortable: true,
                            width:175,
							dataIndex:'Task',
                            editor:false
                        },{
                           
                            hidden:true
                          
                        },
                        {
                            header:'{!JSENCODE($ObjectType.SYSTemplateLink__c.fields.orderNumber__c.Label)}',
                            width:175,
                            id:'OrderNo',
                            readOnly: true,
                            dataIndex:'OrderNumber',
                            editor: new Ext.form.ComboBox({  
                                id:'OrderComboId',
                                width:140,
                                fieldLabel: '',
                                store:OrderNumber,
                                valueField:'OrderNum',
                                displayField:'DisplayOrderno',
                                typeAhead: false,
                                mode: 'local',
                                editable:false,
                                triggerAction: 'all',
                                forceSelection:true,
                                selectOnFocus:true,
                                lazyRender:true
                        })
                        }]     
                        })  ;
                             
         
          grid = new Ext.grid.EditorGridPanel({
                        cm:cm,
                        id:'Sgrid',
                        width:400,
                        height:320,
                        border:false,
                        stripeRows:false,
                        enableHdMenu:false,
                        sortable: false,
                        renderTo:'div1',
                        store:DataStore,
                        clicksToEdit:1,
                        viewConfig: {
                            markDirty: false
                        }
                       
                  });
           
        
           }); 
          
           function SaveBtnHandler (){
               validation ();
           idSetString = Ext.getCmp('idIgnoreExecutionOrder').getValue();
           var finalgriddata='';
           
	            if (err != 1){
           for (var i=0; i<DataStore.data.length; i++)
           { 
            finalgriddata += String.format('{0},{1};',DataStore.getAt(i).get('Taskval'),DataStore.getAt(i).get('OrderNumber'));
           }
           SavegridData(finalgriddata,idSetString);
           
	           }
	           else{
	           Ext.MessageBox.show({ msg:'{!JSENCODE($Label.AppropriateOrdering)}', buttons: Ext.MessageBox.OK});
	           err = 0;
	           }
	           
           }
           
   function validation (){
 		  var orders = new Array ();
          var highestval = 1;
          var lowestval = DataStore.data.length ;
          var newval ;
          
           for (var i=0; i<DataStore.data.length; i++)
          {  
              newval=parseInt( DataStore.getAt(i).get('OrderNumber'));
              orders[i]= newval ;
              if (newval > highestval)
              highestval = newval ; 
              else if(newval<lowestval) 
              lowestval = newval ;
          }
          orders.sort(function(a,b){return a-b});
          if (lowestval!=1){
           err = 1;
          }
          else{
           for (var i=0; i<highestval; i++)
           {
            if (orders[i] != lowestval && orders[i] != ++lowestval){
             err = 1; 
             break;
             }
           }
           }
   }
    function handleSave(){
    	if(messagestring != null && messagestring != '')
    	{
    		
		   
		    var icon = Ext.MessageBox.ERROR ;
		  	Ext.Msg.show({
	           
	            
	            msg: messagestring,
	            buttons: Ext.Msg.OK,
	            width: 300       
	            		    });
    	}
        else
        {
        	window.parent.setPopUpVar('done');
        	if(reqDefId != null && reqDefId != ''){
        		var isChecked = Ext.getCmp('idIgnoreExecutionOrder').getValue();
        		window.parent.setExecutionOrder(!isChecked);
        	}
        	if(window.parent.closePopupRF !=undefined){
				window.parent.closePopupRF();
			}
			else{
		        window.parent.closePopup();
		    }
        }	
    }
    
  </script> 
 <apex:outputPanel id="afterSavePanel">
 <script>
 	var messagestring = '{!JSENCODE(errormessage)}';;
 </script>
 </apex:outputPanel> 
       <apex:form >               
<table  class="clsMainTableSI" cellspacing="0" cellpadding="0">
                        <tr class="clsRowGreyBg">
                            <td >
                                <div id="btnToolbar"></div>
                            </td>
                        </tr>  
                                               </table>

<div id ="div1"/>
 <apex:actionFunction name="SavegridData" rerender="afterSavePanel" action="{!Save}" oncomplete="handleSave()">
 <apex:param assignTo="{!storegridData}" name="finalgriddata" value=""/>
 <apex:param assignTo="{!chkBoxValue}" name="idSetString" value="" />
 </apex:actionFunction>
        </apex:form>
</apex:page>